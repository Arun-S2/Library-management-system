# -*- coding: utf-8 -*-
"""Library management system.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1btshJmuinM19eZACfMPfOJOrO9mFA1tA

# installation and imports
"""

!pip install dnspython
!pip install pymongo[srv]
!pip install tabulate
!pip install pandas

import pymongo

client = pymongo.MongoClient("mongodb+srv://arun:1234@cluster0.ibunzmq.mongodb.net/?retryWrites=true&w=majority")
db = client.Database
records = db.Registered_students
inventory = db.Books_inventory
issue = db.Issued_books

from datetime import datetime
from datetime import date
from datetime import timedelta
import re
import pandas as pd
from tabulate import tabulate

"""# Library management system"""

def email_verification(email):                                                  # Email Verification
  regex = r'[a-z]+[a-z.|0-9]+@[a-za-z]+[.]+.[a-z]{,}'
  if (re.fullmatch(regex, email)):
      return True
  else:
      return False


def pswd_verification(password):                                                 # Password Verification
  regex = r"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!#%*?&])[A-Za-z\d#@$!%*?&]{5,16}$"
  if (re.fullmatch(regex, password)):
      return True
  else:
      return False

def availablebook():                                                            # View available book
  dict = []
  for x in inventory.find({},{'_id':0}):
    dict.append(x)
  if len(dict) == 0:
    print('No books to show !')
    admin()
  else :
    df = pd.DataFrame(dict)
    print(tabulate(df,headers='keys',tablefmt='fancy_grid'))
    admin()

def issuedbook():                                                               # View issued book
  dict = []
  for x in issue.find({},{'_id':0,
                          'Book title':1,
                          'ISBN':1,
                          'Name':1,
                          'Phone':1}):
    dict.append(x)
  if len(dict) == 0:
    print('No books to show !')
    admin()
  else :
    df = pd.DataFrame(dict)
    print(tabulate(df,headers='keys',tablefmt='fancy_grid'))
    admin()


def delete_book():                                                              # Delete book
  isbn_no = input('Enter the ISBN : ')
  x = re.fullmatch('[0-9]{5}', str(isbn_no))
  if not x:
    print('Invalid ISBN !')
    delete_book()
  m = inventory.find_one({'ISBN' : isbn_no},{'_id':0})
  if m :
    print(m)
    d =  input('Enter the title to delete book form the inventory : ')
    if d == m['Book title']:
      inventory.delete_one({'ISBN':isbn_no})
      print("Book deleted form the inventory !")
      admin()
    else:
      print('Incorrect input !')
      delete_book()
  else:
    print('Book not found !')
    admin()

def edit_book():                                                                # Edit book
  isbn_no = input('Enter the ISBN : ')
  m = inventory.find_one({'ISBN' : isbn_no},{'_id':0})
  if m:
    print('Book details : ',m)
    a = input('Edit Title | Author name | ISBN :')
    if a == 'Title':
      title = input('Enter the new Title : ')
      inventory.update_one({'ISBN':isbn_no},{'$set':{'Book title':title}})
      print('Title updated sucessfully !')
      admin()
    elif a == 'Author name':
      author = input('Enter the new Author name : ')
      inventory.update_one({'ISBN':isbn_no},{'$set':{'Author name':author}})
      print('Author name updated sucessfully !')
      admin()
    elif a == 'ISBN':
      new_isbn = input('Enter the new ISBN : ')
      if (re.fullmatch("[0-9]{5}", new_isbn)):
        inventory.update_one({'ISBN':isbn_no},{'$set':{'ISBN':new_isbn}})
        print('ISBN updated sucessfully !')
        admin()
      else:
        print('Invalid ISBN !')
        edit_book()
    else:
      print('Invalid input !!!')
      edit_book()
  else :
    print('Invalid ISBN !')
    edit_book()

def update():                                                                   # Update book
  title = input('Enter book title : ')
  author = input('Enter author name : ')
  def isbn_match():
    isbn = input('Enter ISBN number : ')
    import re
    x = re.fullmatch('[0-9]{5}', str(isbn))
    if x:
      a = inventory.find_one({'ISBN':isbn})
      b = issue.find_one({'ISBN':isbn})
      if a :
        print('ISBN number alredy exists !')
        isbn_match()
      elif b:
        print('ISBN number alredy exists !')
        isbn_match()
      else:
        d = {'Book title':title,
              'Author name':author,
              'ISBN':isbn,}
        inventory.insert_one(d)
        print('Book successfully added to inventory ! ')
        admin()
    else:
      print('Invalid ISBN number !')
      isbn_match()
  isbn_match()

def penalty(renewal):                                                           # Penalty calculation
  currentdate = datetime.today()
  days = (currentdate - renewal).days
  if days > 0 :
    fine = days * 20
    return fine
  else :
    return 0

def penaltyupdate():                                                            # Penalty update
    for k in issue.find():
      isb = k['ISBN']
      renewal = k['Renewal date']
      fine = penalty(renewal)
      issue.update_one({'ISBN':isb},{'$set':{'Penalty':fine}})


def viewpenalty():                                                              # View penalty
  penaltyupdate()
  dic = []
  for x in issue.find({},{'_id':0,
                          'Book title':1,
                          'ISBN':1,
                          'Name':1,
                          'Phone':1,
                          'Penalty':1}):
    dic.append(x)
  if len(dic) == 0:
    print('No books to show !')
    admin()
  else :
    df = pd.DataFrame(dic)
    print(tabulate(df,headers='keys',tablefmt='fancy_grid'))
    admin()


def acceptpenalty():                                                            # Accept penalty
  book = input('Enter ISBN : ')
  x = re.fullmatch('[0-9]{5}', str(book))
  if x :
    f = issue.find_one({'ISBN':book})
    if f:
      penaltyupdate()
      fine = f['Penalty']
      if fine == 0 :
        print('No penalty pending for the book !')
        admin()
      else :
        bok = f['Book title']
        fine1 = f'Penalty amount for the book :{bok} is Rs.{fine}'
        print(fine1)
        i = input('Accept | Home : ')
        if i == 'Accept':
          currentdate = datetime.today()
          issue.update_one({'ISBN':book},{'$set':{'Renewal date':currentdate}})
          print('Successfully updated')
          admin()
        elif i == 'Home':
          admin()
        else:
          print('Invalid input !')
          acceptpenalty()
    else:
      print('Book not found !')
      acceptpenalty()
  else:
    print('Invalid input !,Re-enter the ISBN')
    acceptpenalty()

def issuebook():                                                                # Issue book
  book =  input('Enter ISBN : ')
  x = re.fullmatch('[0-9]{5}', str(book))
  if x :
    global h
    h = inventory.find_one({'ISBN':book})
    o = issue.find_one({'ISBN':book})
    if h:
      h1 = h['Book title']
      h2 = f'Book title :{h1}'
      def verification():
        a = input('Enter the mobile no of the student : ')
        s = records.find_one({'Phone':a},{'_id':0})
        s1 = s['Name']
        s2 = f"Issuing to :{s1}"
        if s :
          print(h2,s2,sep='\n')
          def f():
            f = input('To confirm type Yes | No : ')
            if f == 'Yes':
              t = inventory.find_one({'ISBN':book},{'_id':0})
              issuedate = datetime.today()
              renewal = issuedate + timedelta(days=15)
              for x in h:
                issue.insert_one(t)
                issue.update_one({'ISBN':book},{'$set':s})
                issue.update_one({'ISBN':book},
                                 {'$set':{'Issued date':issuedate,
                                          'Renewal date':renewal}})
                inventory.delete_one({'ISBN':book})
                print('Success !!!')
                admin()
            elif f == 'NO':
              issuebook()
            else:
              print('Invalid input !')
              f()
          f()
        else :
          print('Invalid phone number !')
          verification()
      verification()
    elif o :
      o = o['Name']
      o = f'Book alredy issued to {o}'
      print(o)
      admin()
    else:
      print('Book not available')
      admin()
  else :
    print('Invalid ISBN !')
    issuebook()

def recivebook():                                                               # Recive book
  book = input('Enter ISBN : ')
  x = re.fullmatch('[0-9]{5}', str(book))
  if x:
    fnd = issue.find_one({'ISBN':book})
    if fnd:
      renewal = fnd['Renewal date']
      pe = penalty(renewal)
      bok = fnd['Book title']
      st1 = f'Book title : {bok}'
      st2 = f'Penalty for the book : {pe}'
      print(st1,st2,sep='\n')
      i = input('Accept - Yes | No :')
      if i == 'Yes':
        data = {'ISBN':fnd['ISBN'],
                'Book title':fnd['Book title'],
                'Author name':fnd['Author name']}
        inventory.insert_one(data)
        issue.delete_one({'ISBN':book})
        print('Book recived successfully !')
        admin()
      elif i == 'No':
        def choice():
          inp = input('Home | Recive book : ')
          if inp == 'Home':
            admin()
          elif inp == 'Recive book':
            recivebook()
          else:
            print('Invalid input !')
            choice()
        choice()
      else:
        print('Invalid input !')
        recivebook()
    else:
      print('Book not found in issued list !')
      recivebook()
  else:
    print('Invalid input !')
    recivebook()

def register():                                                                 # Student registration
  print('Registration process !')
  global name
  name = input('Enter your name : ')
  def roll():
    global rollno
    rollno = input('Enter your Roll No : ')
    o = re.fullmatch("['GUVIDS']{6}[0-9]{4}", rollno )
    if not o:
      print('Invalid Roll no!')
      roll()
  roll()
  global dept
  dept = str(input('Enter your department : '))
  def ph():
    global phn
    phn = input('Enter your phone no : ')
    p = re.fullmatch("[0-9]{10}", phn )
    if p:
      a = records.find_one({'Phone':phn})
      if a:
        print('Phone number alredy registered !'
        ,'Try with another number',sep='\n')
        ph()
      else :
        def mail():
          email = input('Enter your E-mail ID : ')
          if email_verification(email) == True:
            def pswd():
              password = input('Set your password : ')
              if pswd_verification(password) == True:
                d = {'Name':name,
                     'Roll no':rollno,
                     'Department':dept,
                     'Phone':phn,'email':email,
                     'Password':password}
                records.insert_one(d)
                print('Registered Sucessfully !!!')
                home()
              else:
                print('Invalid password !')
                pswd()
            pswd()
          else :
            print('Invalid E-mail ID !')
            mail()
        mail()
    else:
      print('Invalid phone no !')
      ph()
  ph()

def std_login():                                                                # Student login
  phn_no = input('Enter your phone number : ')
  p = re.fullmatch("[0-9]{10}", phn_no)
  if p :
    a = records.find_one({'Phone':phn_no})
    if a :
      pswd = a['Password']
      log_pswd = input('Enter your password : ')
      if pswd == log_pswd:
        print('Login success !')
        def inside():
          inp = input('Search | Recived book | Logout: ')
          if inp == 'Search':
            def search():
              print('Search based on',
                    'Enter 1 Book title',
                    'Enter 2 Author name',
                    'Enter 3 to view all available books',
                    sep='\n')
              inp = input()
              if inp == '1':
                ser = input('Enter the book title : ')
                f = inventory.find_one({'Book title':ser},{'_id':0})
                if f :
                  f = [f]
                  f = pd.DataFrame(f)
                  print(tabulate(f,headers='keys',tablefmt='fancy_grid'))
                  inside()
                else:
                  print('Book not found !')
                  inside()
              elif inp == '2':
                ser = input('Enter the author name : ')
                f = inventory.find_one({'Author name':ser},{'_id':0})
                if f :
                  f = [f]
                  f = pd.DataFrame(f)
                  print(tabulate(f,headers='keys',tablefmt='fancy_grid'))
                  inside()
                else:
                  print('Book not found !')
                  inside()
              elif inp == '3':
                dict = []
                for x in inventory.find({},{'_id':0}):
                  dict.append(x)
                if len(dict) == 0:
                  print('No books to show !')
                  inside()
                else :
                  df = pd.DataFrame(dict)
                  print(tabulate(df,headers='keys',tablefmt='fancy_grid'))
                  inside()
              else:
                print('Invalid input !')
                inside()
            search()
          elif inp ==  'Recived book':
            penaltyupdate()
            dict = []
            for x in issue.find({'Phone':phn_no},{'_id':0,
                                                  'Book title':1,
                                                  'Issued date':1,
                                                  'Renewal date':1,
                                                  'Penalty':1}):
              dict.append(x)
            df = pd.DataFrame(dict)
            if len(dict) == 0:
              print('No books to show !')
              inside()
            else :
              print(tabulate(df,headers='keys',tablefmt='fancy_grid'))
              inside()
          elif inp == 'Logout':
            print('Logout successfull !, Have a nice day !!!')
          else :
            print('Invalid input !')
            inside()
        inside()
      else:
        print('Incorrect password !')
        std_login()
    else:
      print("This phone number does't exist !")
      home()
  else:
    print('Invalid phone no !')
    std_login()

def admin():                                                                    # Admin login
  print('Enter 1 for View issued and available books',
        'Enter 2 for Modify and update inventory',
        'Enter 3 for Issue and recive books',
        'Enter 4 for View and accept penalties',
        'Enter 5 for Logout',
        sep='\n')
  a = input()
  if a == '1':
    def view():
      b = input('Issued | Available :')
      if b == 'Issued':
        issuedbook()
      elif b == 'Available':
        availablebook()
      else:
        print('Invalid input !')
        view()
    view()
  elif a == '2':
    def modi():
      b = input('Edit | Update | Delete :')
      if b == 'Edit':
        edit_book()
      elif b == 'Update':
        update()
      elif b == 'Delete':
        delete_book()
      else:
        print('Invalid input !')
        modi()
    modi()
  elif a == '3':
    def trans():
      b = input('Issue | Recive :')
      if b == 'Issue':
        issuebook()
        admin()
      elif b == 'Recive':
        recivebook()
      else:
        print('Invalid input !')
        trans()
    trans()
  elif a == '4':
    def penality():
      b = input('View | Accept :')
      if b == 'View':
        viewpenalty()
      elif b == 'Accept':
        acceptpenalty()
      else:
        print('Invalid input !')
        penality()
    penality()
  elif a == '5':
    print('Logout successfull !, Have a nice day !!!')
  else:
    print('Invalid input')
    admin()

def home():                                                                     # Home
  inp1 = input('Login | Register : ')
  if inp1 == 'Login':
    def login():
      inp2 = input('Admin | Student : ')
      if inp2 == 'Admin':
        def admin_login():
          user_id = input('Enter your username : ')
          pswd = input('Enter your password : ')
          if user_id =='admin' and pswd =='admin' :
            admin()
          else:
            print('Incorrect Username or password !!!')
            login()
        admin_login()
      elif inp2 ==  'Student':
        std_login()
      else:
        print('Invalid input !!!')
        login()
    login()
  elif inp1 =='Register':
    register()
  else:
    print('Invalid input !!!')
    home()

print('Welcome to library management system !')
home()